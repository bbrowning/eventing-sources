/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/eventing-sources/pkg/apis/sources/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GitHubEventSourceLister helps list GitHubEventSources.
type GitHubEventSourceLister interface {
	// List lists all GitHubEventSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GitHubEventSource, err error)
	// GitHubEventSources returns an object that can list and get GitHubEventSources.
	GitHubEventSources(namespace string) GitHubEventSourceNamespaceLister
	GitHubEventSourceListerExpansion
}

// gitHubEventSourceLister implements the GitHubEventSourceLister interface.
type gitHubEventSourceLister struct {
	indexer cache.Indexer
}

// NewGitHubEventSourceLister returns a new GitHubEventSourceLister.
func NewGitHubEventSourceLister(indexer cache.Indexer) GitHubEventSourceLister {
	return &gitHubEventSourceLister{indexer: indexer}
}

// List lists all GitHubEventSources in the indexer.
func (s *gitHubEventSourceLister) List(selector labels.Selector) (ret []*v1alpha1.GitHubEventSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitHubEventSource))
	})
	return ret, err
}

// GitHubEventSources returns an object that can list and get GitHubEventSources.
func (s *gitHubEventSourceLister) GitHubEventSources(namespace string) GitHubEventSourceNamespaceLister {
	return gitHubEventSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GitHubEventSourceNamespaceLister helps list and get GitHubEventSources.
type GitHubEventSourceNamespaceLister interface {
	// List lists all GitHubEventSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GitHubEventSource, err error)
	// Get retrieves the GitHubEventSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GitHubEventSource, error)
	GitHubEventSourceNamespaceListerExpansion
}

// gitHubEventSourceNamespaceLister implements the GitHubEventSourceNamespaceLister
// interface.
type gitHubEventSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GitHubEventSources in the indexer for a given namespace.
func (s gitHubEventSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GitHubEventSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GitHubEventSource))
	})
	return ret, err
}

// Get retrieves the GitHubEventSource from the indexer for a given namespace and name.
func (s gitHubEventSourceNamespaceLister) Get(name string) (*v1alpha1.GitHubEventSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("githubeventsource"), name)
	}
	return obj.(*v1alpha1.GitHubEventSource), nil
}
